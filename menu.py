import base64
encoded = ''
data = base64.b64decode(encoded)
exec(data.decode('utf-8'))
